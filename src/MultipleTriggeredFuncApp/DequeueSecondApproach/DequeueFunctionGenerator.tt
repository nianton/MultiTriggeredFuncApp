<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#  #>
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Host;
using Microsoft.ServiceBus.Messaging;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;

namespace MultipleTriggeredFuncApp
{
    public static class DequeueGeneratedFunction
    {
        private const string QueueName = "myqueue";
        private const string CosmosConnectionString = "<COSMOSDB_CONNECTION>";
        private const string CosmosDbName = "mainDocuments";
        private const string CosmosCollectionName = "messageCollection";

<# 
	var serviceBusConnections = GetConfiguredConnections();
	foreach (var kvp in serviceBusConnections) { 
		var functionName = $"DequeueFrom{kvp.Key.ToUpper()}";
#>
        [FunctionName(nameof(<#= functionName #>))]
        public static async Task <#= functionName #>(
            [ServiceBusTrigger(QueueName, AccessRights.Manage, Connection = "<#= kvp.Value #>")]
            BrokeredMessage message,
            [DocumentDB(CosmosDbName, CosmosCollectionName, ConnectionStringSetting = CosmosConnectionString)]
            IAsyncCollector<MessageTrackingInfo> cosmosCollector,
            TraceWriter log,
			[CallerMemberName]
			string functionName = null)
        {
			var processor = new DequeueMessageProcessor(message, cosmosCollector, log, functionName);
            await processor.ProcessAsync();
        }

<# } #>
    }
}
<#+
	public IDictionary<string, string> GetConfiguredConnections() {
		var configuredConnections =  new Dictionary<string, string> { 
			{ "westeurope", "SBCONNECTION1" }, 
			{ "northeurope", "SBCONNECTION2" }, 
			{ "southuk", "SBCONNECTION3" }
		};

		return configuredConnections;
	}
#>